" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.config/nvim')

" git support
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" nerd tree
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'

" ctrlp
Plug 'ctrlpvim/ctrlp.vim'

" status lines
Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" color theme bundles
Plug 'morhetz/gruvbox'

" javascript / jsx
Plug 'pangloss/vim-javascript', { 'for': ['javascript'] }
Plug 'mxw/vim-jsx', { 'for': ['javascript'] }

" typescript
Plug 'leafgarland/typescript-vim', { 'for': ['typescript'] }

" less
Plug 'JulesWang/css.vim', { 'for': ['css', 'less'] }
Plug 'groenewege/vim-less', { 'for': ['less'] }

" rust
Plug 'rust-lang/rust.vim', { 'for': ['rust'] }

" markdown
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown', { 'for': ['markdown'] }

" json
Plug 'elzr/vim-json', { 'for': ['json'] }

" editorconfig
Plug 'editorconfig/editorconfig-vim'
Plug 'sheerun/vim-polyglot'

" language server support
" A dependency of 'ncm2'.
Plug 'roxma/nvim-yarp'

" v2 of the nvim-completion-manager.
Plug 'ncm2/ncm2'

" LanguageServer client for NeoVim.
Plug 'autozimu/LanguageClient-neovim', {
  \ 'branch': 'next',
  \ 'do': 'bash install.sh',
  \ }

call plug#end()

" Base Configuration {{{
" Core Behavior {{{
" Read .vimrc from current dir, if present
set exrc

" Don't allow shell and write commands in exrc
set secure

" Enable loading plugin / indent settings based on filetype
filetype plugin indent on

" Don't redraw while executing macros, etc
set lazyredraw

" Wait just under a second before CursorHold is fired
set updatetime=750

" Mapping & keycode timeouts
set timeoutlen=600
set ttimeout
set ttimeoutlen=200
" }}}

" UI {{{
" Maintain indent when wrapping
if exists('+breakindent')
  set breakindent
endif

" Highlight textwidth column
set colorcolumn=+1

" Folds {{{
" Auto-close folds below current foldlevel when cursor leaves
set foldclose=all

" Enable folds, using markers by default
set foldenable
set foldmethod=marker

" Default to having all folds open
set foldlevelstart=99

" Limit folds when using indent or syntax
set foldnestmax=5

set foldopen+=jump
" }}}

" Always show statusline
set laststatus=2

" Let same document scroll differently in separate panes
set noscrollbind

" Hide default mode text (i.e. INSERT below status line)
set noshowmode

" Use 5 characters for number well
set numberwidth=5

" Disable visual bell
set noerrorbells
set visualbell t_vb=

" Show cursor position in bottom right
set ruler

" Keep lines in view at edges of screen
set scrolloff=5
set sidescrolloff=5
set sidescroll=1

" Hide the intro screen, use [+] instead of [Modified], use [RO] instead
" of [readyonly], and don't give completion match messages
set shortmess+=Imrc

" Display incomplete commands
set showcmd

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Reasonable tab completion
set wildmode=full

" Resize splits when the window is resized
augroup on_vim_resized
  autocmd!
  autocmd VimResized * wincmd =
augroup END
" }}}

" File Handling {{{
" Automatically write files on :next, :make, etc
set autowriteall

" Save automatically all the time
augroup auto_save
  autocmd!
  " Frequently save automatically
  autocmd BufLeave,FocusLost,InsertLeave,TextChanged * silent! wall
  " Check for file changes
  autocmd BufEnter,BufWinEnter,CursorHold,FocusGained * silent! checktime
augroup END

" Hide buffers instead of closing them (useful for switching between files)
set hidden

" Don't use backup files, we have Git for that
set nobackup
set noswapfile
set nowritebackup

" Search within subfolders by default
set path+=**
" But ignore noise
set path-=.git,build,lib,node_modules,public,_site,third_party

" Ignore autogenerated files
set wildignore+=*.o,*.obj,*.pyc
" Ignore source control
set wildignore+=.git
" Ignore lib/ dirs since the contain compiled libraries typically
set wildignore+=build,lib,node_modules,public,_site,third_party
" Ignore images and fonts
set wildignore+=*.gif,*.jpg,*.jpeg,*.otf,*.png,*.svg,*.ttf
" Ignore case when completing
set wildignorecase
" }}}

" Editing Behavior {{{
" Indentation {{{
" C-style indentation
set cindent

" Tabs are spaces
set expandtab

" 2 spaces, not tabs
set shiftwidth=2
set softtabstop=2
set tabstop=2

" Round up indents
set shiftround
" }}}

" Completion {{{
" Enable tab/enter if completion menu is open
inoremap <expr> <Tab> (pumvisible() ? "\<C-n>" : "\<Tab>")
inoremap <expr> <S-Tab> (pumvisible() ? "\<C-p>" : "\<S-Tab>")
" }}}

" Default formatoptions (as of neovim): tcqj
" Only break the line if wasn't longer than 80 chars when editing began
" and there is a blank somewhere in the line
set formatoptions+=lb
" Don't continue comments when pressing o/O
set formatoptions-=o
" Recognize numbered lists and wrap accordingly
set formatoptions+=n

" Show special indicators
set list
" Highlight trailing spaces
set listchars=trail:·,tab:»·
" Show wrap indicators
set listchars+=extends:»,precedes:«
" Show non-breaking spaces
set listchars+=nbsp:%

" Allow incrementing letters
set nrformats+=alpha

" Always assume decimal numbers
set nrformats-=octal

" Show matching brackets for half a second
set showmatch
set matchtime=5

" Wrap at 80 characters
set textwidth=80

" Make h/l move across beginning/end of line
set whichwrap+=hl

" Soft wrap, with indicator
set wrap
set showbreak=«
" }}}

" Enable syntax highlighting by default
syntax enable

" Only highlight first 500 chars for better performance
set synmaxcol=500
" }}}

" Searching {{{
" Match all results in a line by default (/g at end will undo this)
set gdefault

" Ignore case, except when using some uppercase
set ignorecase
set smartcase

" Netrw config {{{
" Disable annoying banner
let g:netrw_banner=0

" Open in same window
let g:netrw_browse_split=0

" Open splits to the right
let g:netrw_altv=1

" Tree view
let g:netrw_liststyle=3

" Hide files in .gitignore
let g:netrw_list_hide=netrw_gitignore#Hide()
let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'
" }}}

" Color scheme {{{
syntax on
set background=dark
set guifont=Source\ Code\ Pro:h14
colorscheme gruvbox
hi CursorLineNr  cterm=bold ctermfg=136
" }}}

" completion settings
autocmd BufEnter  *  call ncm2#enable_for_buffer()

" Better Completion
set complete=.,w,b,u,t
set completeopt=longest,menuone,preview

" Automatically start language servers.
let g:LanguageClient_autoStart = 1

" Use location list instead of quickfix
let g:LanguageClient_diagnosticsList = 'location'

augroup LanguageClientConfig
  autocmd!

  " <leader>ld to go to definition
  autocmd FileType javascript,python,typescript,json,css,less,html,rust nnoremap <buffer> <leader>ld :call LanguageClient_textDocument_definition()<cr>
  " <leader>lf to autoformat document
  autocmd FileType javascript,python,typescript,json,css,less,html,rust nnoremap <buffer> <leader>lf :call LanguageClient_textDocument_formatting()<cr>
  " <leader>lh for type info under cursor
  autocmd FileType javascript,python,typescript,json,css,less,html,rust nnoremap <buffer> <leader>lh :call LanguageClient_textDocument_hover()<cr>
  " <leader>lr to rename variable under cursor
  autocmd FileType javascript,python,typescript,json,css,less,html,rust nnoremap <buffer> <leader>lr :call LanguageClient_textDocument_rename()<cr>
  " <leader>lc to switch omnifunc to LanguageClient
  autocmd FileType javascript,python,typescript,json,css,less,html,rust nnoremap <buffer> <leader>lc :setlocal omnifunc=LanguageClient#complete<cr>
  " <leader>ls to fuzzy find the symbols in the current document
  autocmd FileType javascript,python,typescript,json,css,less,html,rust nnoremap <buffer> <leader>ls :call LanguageClient_textDocument_documentSymbol()<cr>

  " Use as omnifunc by default
  autocmd FileType javascript,python,typescript,json,css,less,html,rust setlocal omnifunc=LanguageClient#complete
augroup END
let g:LanguageClient_serverCommands = {
  \ 'javascript': ['javascript-typescript-stdio'],
  \ 'typescript': ['javascript-typescript-stdio'],
  \ 'rust': ['rustup', 'run', 'nightly', 'rls'],
  \ 'css': ['css-languageserver', '--stdio'],
  \ 'html': ['html-languageserver', '--stdio'],
  \ 'less': ['css-languageserver', '--stdio'],
  \ 'json': ['json-languageserver', '--stdio'],
  \ }

" status line (airline)
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_theme = 'powerlineish'

" tmux line
let g:tmuxline_preset = 'powerline'
let g:tmuxline_theme = 'powerline'
let g:tmuxline_separators = {
    \ 'left' : '',
    \ 'left_alt': '>',
    \ 'right' : '',
    \ 'right_alt' : '<',
    \ 'space' : ' '}
" }}}

" Ctrl-P file / buffer management {{{
nnoremap <leader>n :CtrlP<CR>
nnoremap <leader>b :CtrlPBuffer<CR>
nnoremap <leader>r :CtrlPClearCache<CR>
"}}}

" Javascript libraries syntax {{{
let g:used_javascript_libs='react'
" }}}

" vim-jsx config {{{
" Don't require .jsx extension
let g:jsx_ext_required=0
" }}}
